/*
 * Copyright (C) 2018. Uber Technologies
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'

version = VERSION_NAME
group = GROUP

def isReleaseBuild() {
    return VERSION_NAME.contains('SNAPSHOT') == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL :
            'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL :
            'https://oss.sonatype.org/content/repositories/snapshots/'
}

def getRepositoryUsername() {
    return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : ''
}

def getRepositoryPassword() {
    return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ''
}

def kotlinAndroidArtifactTasks() {
    if (!project.plugins.hasPlugin('org.jetbrains.dokka')) {
        throw new GradleException("Apply the dokka plugin in ${project.name}")
    }

    tasks.named("dokkaHtml") {
        outputDirectory.set(new File(buildDir, "/docs/kdoc"))
        dokkaSourceSets.configureEach {
            classpath = new ArrayList<File>(project.tasks['assemble'].outputs.files.files)
            includes = ['Module.md']
            externalDocumentationLink {
                url = new URL('http://reactivex.io/RxJava/2.x/javadoc/')
            }
        }
    }

    task docJar(type: Jar, dependsOn: dokka) {
        archiveClassifier = 'javadoc'
        from dokka.outputDirectory
    }

    task sourceJar(type: Jar) {
        archiveClassifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }
}

def kotlinArtifactTasks() {
    if (!project.plugins.hasPlugin('org.jetbrains.dokka')) {
        throw new GradleException("Apply the dokka plugin in ${project.name}")
    }

    tasks.named("dokkaHtml") {
        outputDirectory.set(new File(buildDir, "/docs/kdoc"))
        dokkaSourceSets.configureEach {
            includes = ['Module.md']
            externalDocumentationLink {
                url = new URL('http://reactivex.io/RxJava/2.x/javadoc/')
            }
        }
    }

    task docJar(type: Jar, dependsOn: dokkaHtml) {
        archiveClassifier = 'javadoc'
        from dokkaHtml.outputDirectory
    }

    task sourceJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }
}

def androidArtifactTasks() {
    task androidJavadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs

        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        exclude '**/internal/*'

        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    task docJar(type: Jar, dependsOn: androidJavadoc) {
        archiveClassifier = 'javadoc'
        from androidJavadoc.destinationDir
    }

    task sourceJar(type: Jar) {
        archiveClassifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }
}

def javaArtifactTasks() {
    task javaJavadoc(type: Javadoc) {
        source = sourceSets.main.allSource

        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    task docJar(type: Jar, dependsOn: javaJavadoc) {
        archiveClassifier = 'javadoc'
        from javaJavadoc.destinationDir
    }

    task sourceJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource.srcDirs
    }
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask('uploadArchives') }
        sign configurations.archives
    }

    if (project.getPlugins().hasPlugin('com.android.application') || project.getPlugins().
            hasPlugin('com.android.library')) {
        task install(type: Upload, dependsOn: assemble) {
            repositories.mavenInstaller {
                configuration = configurations.archives

                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }

        if (project.plugins.hasPlugin('kotlin-android')) {
            kotlinAndroidArtifactTasks()
        } else {
            androidArtifactTasks()
        }
    } else {
        install {
            repositories.mavenInstaller {
                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }

        if (project.plugins.hasPlugin('kotlin')) {
            kotlinArtifactTasks()
        } else {
            javaArtifactTasks()
        }
    }

    artifacts {
        archives sourceJar
        archives docJar
    }
}